---
# tasks file for iptables

#############################
#############################
# centralRouter ##
- name: disabel fierwalld
  systemd:
    name: firewalld
    state: stopped
    enabled: no
  when: ansible_facts['hostname'] == "inetRouter"

- name: install iptabels
  yum: name=iptables-services state=latest
  when: ansible_facts['hostname'] == "inetRouter"

- name: enabel iptables in systemd
  systemd:
    name: iptables
    state: started
    enabled: yes
  when: ansible_facts['hostname'] == "inetRouter"

################################
### PREROUTING

################################
### INPUT
#iptables --flush INPUT
#iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT  
#iptables -A INPUT -p icmp -j ACCEPT      
#iptables -A INPUT -i lo -j ACCEPT      
#iptables -A INPUT -m state --state NEW -m tcp -p tcp --dport 22 -j ACCEPT   # ssh is OK
#iptables -A INPUT -j REJECT 

- name: drop INPUT 
  shell: iptables --flush INPUT
  when: ansible_facts['hostname'] == "inetRouter"
- name: drop TRAFFIC 
  shell: iptables --flush TRAFFIC
  when: ansible_facts['hostname'] == "inetRouter"
  ignore_errors: yes
- name: drop SSH-INPUT 
  shell: iptables --flush SSH-INPUT
  when: ansible_facts['hostname'] == "inetRouter"
  ignore_errors: yes
- name: drop SSH-INPUTTWO 
  shell: iptables --flush SSH-INPUTTWO
  when: ansible_facts['hostname'] == "inetRouter"
  ignore_errors: yes
- name: drop TRAFFIC 
  shell: iptables -X TRAFFIC
  ignore_errors: yes
  when: ansible_facts['hostname'] == "inetRouter"
- name: drop SSH-INPUT 
  shell: iptables -X SSH-INPUT
  ignore_errors: yes
  when: ansible_facts['hostname'] == "inetRouter"
- name: drop SSH-INPUTTWO 
  shell: iptables -X SSH-INPUTTWO
  ignore_errors: yes
  when: ansible_facts['hostname'] == "inetRouter"


- name: drop TRAFFIC 
  shell: iptables -N TRAFFIC
  when: ansible_facts['hostname'] == "inetRouter"
  ignore_errors: yes

- name: iptables -N SSH-INPUT 
  shell: iptables -N SSH-INPUT 
  when: ansible_facts['hostname'] == "inetRouter"
  ignore_errors: yes

- name: iptables -N SSH-INPUTTWO
  shell: iptables -N SSH-INPUTTWO
  when: ansible_facts['hostname'] == "inetRouter"
  ignore_errors: yes


##################################



- name: -A INPUT -j TRAFFIC
  shell: iptables -A INPUT -j TRAFFIC
  when: ansible_facts['hostname'] == "inetRouter"

- name: ESTABLISHED TRAFFIC ACCEPT
  shell: iptables -A TRAFFIC -m state --state ESTABLISHED,RELATED -j ACCEPT
  when: ansible_facts['hostname'] == "inetRouter"

- name: iptables -A TRAFFIC -p icmp -j ACCEPT  
  shell: iptables -A TRAFFIC -p icmp -j ACCEPT  
  when: ansible_facts['hostname'] == "inetRouter"

- name: iptables -A TRAFFIC -i lo -j ACCEPT  
  shell: iptables -A TRAFFIC -i lo -j ACCEPT  
  when: ansible_facts['hostname'] == "inetRouter"

#- name: Accept 22 port 
#  shell: iptables -A INPUT -m state --state NEW -m tcp -p tcp --dport 22 -j ACCEPT
#  when: ansible_facts['hostname'] == "inetRouter"


#knok
#-A TRAFFIC -m state --state NEW -m tcp -p tcp --dport 22 -m recent --rcheck --seconds 30 --name SSH2 -j ACCEPT
#-A TRAFFIC -m state --state NEW -m tcp -p tcp -m recent --name SSH2 --remove -j DROP
#-A TRAFFIC -m state --state NEW -m tcp -p tcp --dport 5556 -m recent --rcheck --name SSH1 -j SSH-INPUTTWO
#-A TRAFFIC -m state --state NEW -m tcp -p tcp -m recent --name SSH1 --remove -j DROP
#-A TRAFFIC -m state --state NEW -m tcp -p tcp --dport 6667 -m recent --rcheck --name SSH0 -j SSH-INPUT
#-A TRAFFIC -m state --state NEW -m tcp -p tcp -m recent --name SSH0 --remove -j DROP
#-A TRAFFIC -m state --state NEW -m tcp -p tcp --dport 7778 -m recent --name SSH0 --set -j DROP
#-A SSH-INPUT -m recent --name SSH1 --set -j DROP
#-A SSH-INPUTTWO -m recent --name SSH2 --set -j DROP 
#-A TRAFFIC -j DROP

- name: iptables -A TRAFFIC -m state --state NEW -m tcp -p tcp --dport 22 -m recent --rcheck --seconds 30 --name SSH2 -j ACCEPT
  shell: iptables -A TRAFFIC -m state --state NEW -m tcp -p tcp --dport 22 -m recent --rcheck --seconds 30 --name SSH2 -j ACCEPT
  when: ansible_facts['hostname'] == "inetRouter"

- name: iptables -A TRAFFIC -m state --state NEW -m tcp -p tcp -m recent --name SSH2 --remove -j DROP
  shell: iptables -A TRAFFIC -m state --state NEW -m tcp -p tcp -m recent --name SSH2 --remove -j DROP
  when: ansible_facts['hostname'] == "inetRouter"

- name: iptables -A TRAFFIC -m state --state NEW -m tcp -p tcp --dport 5556 -m recent --rcheck --name SSH1 -j SSH-INPUTTWO
  shell: iptables -A TRAFFIC -m state --state NEW -m tcp -p tcp --dport 5556 -m recent --rcheck --name SSH1 -j SSH-INPUTTWO
  when: ansible_facts['hostname'] == "inetRouter"

- name: iptables -A TRAFFIC -m state --state NEW -m tcp -p tcp -m recent --name SSH1 --remove -j DROP
  shell: iptables -A TRAFFIC -m state --state NEW -m tcp -p tcp -m recent --name SSH1 --remove -j DROP
  when: ansible_facts['hostname'] == "inetRouter"

- name: iptables -A TRAFFIC -m state --state NEW -m tcp -p tcp --dport 6667 -m recent --rcheck --name SSH0 -j SSH-INPUT
  shell: iptables -A TRAFFIC -m state --state NEW -m tcp -p tcp --dport 6667 -m recent --rcheck --name SSH0 -j SSH-INPUT
  when: ansible_facts['hostname'] == "inetRouter"

- name: iptables -A TRAFFIC -m state --state NEW -m tcp -p tcp -m recent --name SSH0 --remove -j DROP
  shell: iptables -A TRAFFIC -m state --state NEW -m tcp -p tcp -m recent --name SSH0 --remove -j DROP
  when: ansible_facts['hostname'] == "inetRouter"

- name: iptables -A TRAFFIC -m state --state NEW -m tcp -p tcp --dport 7778 -m recent --name SSH0 --set -j DROP
  shell: iptables -A TRAFFIC -m state --state NEW -m tcp -p tcp --dport 7778 -m recent --name SSH0 --set -j DROP 
  when: ansible_facts['hostname'] == "inetRouter"

- name: iptables -A SSH-INPUT -m recent --name SSH1 --set -j DROP 
  shell: iptables -A SSH-INPUT -m recent --name SSH1 --set -j DROP
  when: ansible_facts['hostname'] == "inetRouter"

- name: iptables -A SSH-INPUTTWO -m recent --name SSH2 --set -j DROP 
  shell: iptables -A SSH-INPUTTWO -m recent --name SSH2 --set -j DROP 
  when: ansible_facts['hostname'] == "inetRouter"

- name: iptables -A TRAFFIC -j DROP 
  shell: iptables -A TRAFFIC -j DROP 
  when: ansible_facts['hostname'] == "inetRouter"

#DROP
#- name: any other traffic is not welcome 
#  shell: iptables -A INPUT -j REJECT
#  when: ansible_facts['hostname'] == "inetRouter"

################################
### FORWARD
#-A FORWARD -j REJECT --reject-with icmp-port-unreachable

- name: drop FORWARD 
  shell: iptables --flush FORWARD
  when: ansible_facts['hostname'] == "inetRouter"

- name: Accept forward 
  shell: iptables -A FORWARD -j ACCEPT
  when: ansible_facts['hostname'] == "inetRouter"
################################
### OUTPUT

################################
### POSTROUTING

###############################
- name: service iptables save
  shell: service iptables save
  when: ansible_facts['hostname'] == "inetRouter"


#####################################
#####################################



# centralRouter
- name: iptables -I FORWARD -j ACCEPT
  iptables:
    table: filter
    chain: FORWARD
    jump: ACCEPT
    action: insert
    rule_num: 1
    comment: accept trafic route iptables -I FORWARD -j ACCEPT
  become: yes
  when: ansible_facts['hostname'] == "centralRouter"

- name: copy knock scrypt
  copy: src=knock.sh dest=/root/knock.sh mode=0700

# inetRouter2    
#Открыть порт 8080
- name: Insert a rule open 8080 port
  iptables:
    chain: INPUT
    protocol: tcp
    destination_port: 8080
    jump: ACCEPT
    action: insert
    rule_num: 2
  when: ansible_facts['hostname'] == "inetRouter2"
#Разрешаем форвардинг всех пакетов чез локальный хост. Плюс параметры ядра устанавливаются в роли Quaga
- name: iptables -I FORWARD -j ACCEPT
  iptables:
    table: filter
    chain: FORWARD
    jump: ACCEPT
    action: insert
    rule_num: 1
    comment: accept trafic route iptables -I FORWARD -j ACCEPT
  become: yes
  when: ansible_facts['hostname'] == "inetRouter2"
#Перенаправление трафика с порта на другую машину на конкретный порт с внешенго трафика
- name: Forward port 8080 to 80 and route trafic onethe ip 192.168.0.2
  iptables:
    table: nat
    chain: PREROUTING
    protocol: tcp
    match: tcp
    destination_port: '8080'
    jump: DNAT
    to_destination: '192.168.0.2:80'
    action: insert
    comment: Redirect web traffic to port 8080 in centralServer
  become: yes
  when: ansible_facts['hostname'] == "inetRouter2"
#Перенаправление трафика с порта на другую машину на конкретный порт с внутреннего трафика localhost
- name: Forward port 8080 to 80 and route trafic onethe ip 192.168.0.2
  iptables:
    table: nat
    chain: OUTPUT
    protocol: tcp
    match: tcp
    destination_port: '8080'
    jump: DNAT
    to_destination: '192.168.0.2:80'
    action: insert
    comment: Redirect web traffic to port 8080 in centralServer
  become: yes
  when: ansible_facts['hostname'] == "inetRouter2"
#это правило маскирует исходящий трафик при перенаправлении с конкретного порта
#iptables -I POSTROUTING -j MASQUERADE - 'это маскарадинг для всвего исходящего трафика, но можно ограничить -d -s'
- name: Forward port 8080 to 80
  iptables:
    table: nat
    chain: POSTROUTING
    protocol: tcp
    match: tcp
    destination_port: '80'
    destination: '192.168.0.2'
    jump: SNAT
    to_source: '192.168.255.17'
    action: insert
    comment: Redirect web traffic to port 8080 in centralServer
  become: yes
  when: ansible_facts['hostname'] == "inetRouter2"

#Сохраниение ip tabels 